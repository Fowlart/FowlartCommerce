package com.fowlart.main

import com.fowlart.main.in_mem_catalog.Item
import com.fowlart.main.state.{BotVisitor, Order, ScalaBotVisitor}
import org.telegram.telegrambots.meta.api.methods.send.{SendMessage, SendPhoto}
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup

import java.io.{File, IOException}
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.{Files, Path}
import java.util
import java.util.function.BiPredicate
import java.util.{List, Optional}
import java.util.regex.Pattern
import java.util.stream.{Collectors, Stream}
import javax.activation.MimetypesFileTypeMap
import scala.collection.JavaConverters._

class ScalaHelper {


   def getItemMessageWithPhoto(chatId: Long,
                               item: Item,
                               itemNotFoundImgPath: String,
                               inputForImgPath: String,
                               keyboardHelper: KeyboardHelper) = {

     val biPredicate: BiPredicate[Path,BasicFileAttributes] = (path, _) => {
       val theFile = path.toFile
       val mimetype = new MimetypesFileTypeMap().getContentType(theFile)
       val theType = mimetype.split("/")(0)
       path.getFileName.toString.toLowerCase.contains(item.name.toLowerCase) && theType == "image"
     }

     val itemImgOp = Files.find(Path.of(s"$inputForImgPath/"), 1, biPredicate).findFirst()

     val noImageImg = new File(itemNotFoundImgPath)

     val response = SendPhoto
       .builder
       .caption(getEditItemQtyMsg(item))
       .replyMarkup(keyboardHelper.buildBucketItemKeyboardMenu(item.id))
       .chatId(chatId)
       .parseMode("html")
       .photo(new InputFile(noImageImg)).build

     if (itemImgOp.isPresent && itemImgOp.get.toFile.exists) {
       response.setPhoto(new InputFile(itemImgOp.get.toFile))
     }

     response
   }

  def getItemMessageWithPhotoWithDeleteButtonOnly(chatId: Long,
                                                  item: Item,
                                                  itemNotFoundImgPath: String,
                                                  inputForImgPath: String,
                                                  keyboardHelper: KeyboardHelper) = {

    val response = getItemMessageWithPhoto(chatId,item,itemNotFoundImgPath,inputForImgPath,keyboardHelper)
    response.setReplyMarkup(keyboardHelper.buildAddToBucketItemKeyboardMenu(item.id()))
    response
  }

  def getItemMessageWithPhotoInBucket(chatId: Long, item: Item, itemNotFoundImgPath: String, inputForImgPath: String, keyboardHelper: KeyboardHelper) = {

    val response = getItemMessageWithPhoto(chatId, item, itemNotFoundImgPath, inputForImgPath, keyboardHelper)
    response.setCaption(getItemBucketMessage(item))
    response
  }


  def buildSimpleReplyMessage(userId: Long, text: String, markUp: InlineKeyboardMarkup): SendMessage = {

    SendMessage
      .builder
      .chatId(userId)
      .text(text)
      .replyMarkup(markUp)
      .build
  }

  def getItemBucketIntroMessage(userId: String,keyboardHelper: KeyboardHelper): SendMessage = {
    SendMessage.builder.chatId(userId)
      .replyMarkup(keyboardHelper.buildBucketKeyboardMenu())
      .text(
        s"""
           | –ù–∏–∂—á–µ, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—Ä–∑–∏–Ω—ñ.
           | –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Ç–∞ –∫–µ—Ä—É–π—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–æ–≤–∞—Ä—ñ–≤.
           |""".stripMargin).build
  }

  def getItemBucketMessage(item: Item): String =
    s"""
       |${item.toString2}
       |""".stripMargin

  def getEditItemQtyMsg(item: Item): String =
    s"""
       |
       |–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É <b>—Ü—ñ–ª–∏–º</b> –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º:
       |
       |${item.toString3}
       |""".stripMargin

  def getEmptyBucketMessage(keyboardHelper: KeyboardHelper, userId: Long): SendMessage = {

    SendMessage.builder.chatId(userId)
      .text( "[–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è]")
      .replyMarkup(keyboardHelper.buildMainMenuReply()).build
  }

  def isNumeric(strNum: String): Boolean = {
    val pattern = Pattern.compile("-?\\d+")
    if (strNum == null) return false
    pattern.matcher(strNum).matches
  }

  def isPhoneNumber(strNum: String): Boolean = {
    val pattern = Pattern.compile("^\\d{3}-\\d{3}-\\d{4}$")
    if (strNum == null) return false
    pattern.matcher(strNum).matches
  }

  def getSubMenuText(itemList: java.util.List[Item], group: String): Array[String] = {
    val maxItemsPerReply = 15
    val itemSeq = itemList.asScala.filter(item=>group.equals(item.group()))
    // ordering for pretty printing
    implicit val orderingForItem: Ordering[Item] = (x: Item, y: Item) =>
      x.name().trim.length.compareTo(y.name().trim.length)
    val reOrderedList = itemSeq.sorted
    val grouped = reOrderedList.grouped(maxItemsPerReply)
    val res = grouped.toList.filter(it => it.nonEmpty).map(it => {
      it.map(item =>
        s"""
           |<b>${item.name.trim}
           |${item.price} –≥—Ä–Ω
           |üî• /${item.id}</b> üî•
           |""".stripMargin).reduce((v1, v2) => s"$v1$v2")
    })
    res.toArray
  }

  def getEmailOrderText(order: Order): String =
    s"""
       |<H3 style="color: green">–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</H3>
       |<b>–î–∞—Ç–∞:</b> ${order.date}
       |
       |<br/><b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> ${order.userId}
       |
       |<br/><b>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${order.orderId}
       |
       |<br/><b>–Ü–º'—è:</b> ${order.userName}
       |
       |<br/><b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> ${if (order.userPhoneNumber!=null) order.userPhoneNumber else "[–Ω–æ–º–µ—Ä –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π/–≤–∫–∞–∑–∞–Ω–∏–π –Ω–µ –≤—ñ—Ä–Ω–æ]"}
       |
       |<H3 style="color: green">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</H3>
       |   ${order.orderBucket.map(it=>s"""${it.toString}""").reduce((s1,s2)=>s"$s1<br/>$s2")}
       |
       |""".stripMargin


  def getNameEditingText(userId: Long): String =
    s"""|üòé
        |–î–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $userId/–ü–Ü–ë
        |
        |–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—ñ—Ç—å—Å—è. –ö—Ä–∞—â–µ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è —Ñ–æ—Ä–º–∞—Ç—É:
        |–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è.
        |–£–≤–∞–≥–∞, –º–∏ –Ω–µ –±—É–¥–µ–º–æ –Ω–∞–º–∞–≥–∞—Ç–∏—Å—è –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç.
        |""".stripMargin


  def getPhoneEditingText(userId: Long): String = {
    s"""|üòé
        |–î–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $userId/—Ç–µ–ª–µ—Ñ–æ–Ω
        |
        |–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        |–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
        |     xxx-xxx-xxxx
        |""".stripMargin
  }
  def getPersonalDataEditingSectionText(botVisitor: BotVisitor): String = {

    val phoneNumber = if (botVisitor.getPhoneNumber==null) "" else botVisitor.getPhoneNumber

    s"""|üòé
        |ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        |${botVisitor.getUserId}
        |
        |–Ü–º'—è/–ü—Ä—ñ–∑–≤–∏—â–µ:
        |${if (botVisitor.getName!=null) botVisitor.getName else botVisitor.getUser.getFirstName}
        |
        |–¢–µ–ª—Ñ–æ–Ω:
        |$phoneNumber
        |""".stripMargin
  }
  def getMainMenuText(name: String): String ={
    s"""|–ü—Ä–∏–≤—ñ—Ç, $name!
        |
        |–¶–µ –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤, –Ω–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–Ω—é.
        |–ê–±–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É, —á–∏ –∑–∞–º–æ–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∏, –Ω–∞—Ç–∏—Å–∫–∞—é—á–∏
        |—ó—Ö ID –Ω–æ–º–µ—Ä.
        |
        |–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç–µ–π –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—ñ.""".stripMargin}

  def getPhoneNumberReceivedText(): String =
    s"""|–î—è–∫—É—î–º–æ. –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ–ª—å.""".stripMargin


  def getFullNameReceivedText(): String =
    s"""|–î—è–∫—É—î–º–æ. –Ü–º'—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ–ª—å.""".stripMargin

  def getItemQtyWrongEnteredNumber(botVisitor: ScalaBotVisitor): String =
    s"""|ü§∑‚Äç‚ôÇÔ∏è
        |–í–≤–µ–¥–µ–Ω–µ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤
        |—Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.
        |–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ü—ñ–ª–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –ß–ò–°–õ–û.
        |
        |${botVisitor.itemToEditQty.toString3}
        |""".stripMargin

  def getItemNotAcceptedText(): String =
    s"""
       |–í–∏ –∞–±–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ ID,
       |–∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∫—Ä—ñ–º —Å–∞–º–æ–≥–æ ID —Ç–æ–≤–∞—Ä—É
       |–∞–±–æ –∑—Ä–æ–±–∏–ª–∏ —â–æ—Å—å —Ç–∞–∫–µ, —á–æ–≥–æ –º–∏ –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–∏–ª–∏.
       |–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å-–ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑–æ–∫.
       |""".stripMargin

  def getContactsMsg(): String =
    s"""
       |–í–ª–∞—Å–Ω–∏–∫: –ê–Ω–¥—Ä—ñ–π –°–∫—ñ—Ä–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á
       |
       |—Ç–µ–ª: 097-257-0077
       |""".stripMargin

}
